{Ekow DS Game Editor}
con _clkfreq = 300_000_000

    R_JOY_X_MIN=4, R_JOY_X_MAX=252, R_JOY_Y_MIN=4, R_JOY_Y_MAX=252, L_JOY_X_MIN=2, L_JOY_X_MAX=254, L_JOY_Y_MIN=4, L_JOY_Y_MAX=252
    #0, x, y, width, height
    frame_time=75
    collision_debug_mode=false

obj
    sprites : "DS_Sprites"
    ' sprites: "standing_sprites"
    i2c     : "jm_i2c"

CON
    ENEMY_ACTIVE     = 0
    ENEMY_X          = 1
    ENEMY_Y          = 2
    ENEMY_HP         = 3
    ENEMY_TOP_LEFT_SPRITE = 4
    ENEMY_TOP_RIGHT_SPRITE   = 5
    ENEMY_BOTTOM_LEFT_SPRITE  = 6
    ENEMY_BOTTOM_RIGHT_SPRITE  = 7
    ENEMY_ROTATION      = 8
    ENEMY_SIZE = 9
var
    ' Character-related variables
    long character_motion_triggered
    long character[4]  ' x, y, width, height
    long character_top_left, character_top_right, character_bottom_left, character_bottom_right
    long character_rotation, character_opacity
    long character_hitting, character_jumping, character_moving, character_animation_state
    long starting_x, starting_y

    ' Enemy-related variables
    long enemies[40]  ' 5 enemies * 5 parameters each
    long enemy[4]  ' x, y, width, height
    long enemy_top_left, enemy_top_right, enemy_bottom_left, enemy_bottom_right
    long enemy_animation_state
    long enemy_count, enemies_alive

    ' Controller-related variables
    byte data[8]
    long L_JOY_X, L_JOY_Y

    ' Game-related variables
    long round_num
    long gravity, jump_help
    long collision, easter_egg

    ' Timing-related variables
    long frame_rate, frame_rate_wait_time
    long start_time, raw_loop_time, loop_time, display_delay

    ' Stack memory for cogs
    long stack_0[500], stack_1[100], stack_2[100], stack_3[100]
    long stack_4[100], stack_5[100], stack_6[100], stack_7[100]

pub video_game() | i
    debug(`plot screen pos 100 0 size 768 640 backcolor black update)
    debug(`screen set 400 330 blue text 50 'Loading sprites...')
    debug(`screen update)
    init_controller()
    sprites.load_sprites()
    ' define_collision_areas()
    ' easter_egg := false
    round_num :=1
    init_character()

    ' cogspin(2, debug_display(), @stack_2)
    ' cogspin(3,debug_character_motion(), @stack_3)


    repeat
        start_time := getct()
        debug(`screen clear)
        draw_background()
        read_controller()

        ' Clamping logic
        L_JOY_X := 0 #> (data[0] - L_JOY_X_MIN) * 100 / (L_JOY_X_MAX - L_JOY_X_MIN) <# 100
        L_JOY_Y := 0 #> (data[2] - L_JOY_Y_MIN) * 100 / (L_JOY_Y_MAX - L_JOY_Y_MIN) <# 100

        ' if L_JOY_X ==100
        '     L_JOY_X := 50
        '     character_animation_state := 0

        if is_button_pressed("A")
            character_hitting := true
            character_animation_state := 2
        elseif is_button_pressed("B")
            character_jumping := true
            character_animation_state := 3
        elseif (L_JOY_X < 45 or L_JOY_X > 55)
            character_moving := true
            character_animation_state := 1
            if L_JOY_X < 45
                character_rotation := 1
            else
                character_rotation := 0
        else
            character_moving := false
            character_animation_state := 0

        case_fast L_JOY_X
            0..20  : character[x] := 0 #> character[x] - 16 <# 740
            21..30  : character[x] := 0 #> character[x] - 8 <# 740
            31..40  : character[x] := 0 #> character[x] - 4 <# 740
            61..70  : character[x] := 0 #> character[x] + 4 <# 740
            71..80  : character[x] := 0 #> character[x] + 8 <# 740
            81..100 : character[x] := 0 #> character[x] + 16 <# 740

        if character_rotation == 0
            draw_character(character_top_left, character_top_right, character_bottom_left, character_bottom_right)
        else
            draw_character(character_top_right, character_top_left, character_bottom_right, character_bottom_left)


        if data[6].[4] == 0
            pause_game()

        frame_rate := frame_time * 300_000 - abs(start_time - getct())
        if frame_rate <= 0
            debug(`screen set 384 600 red text 20 'Frame loop took longer than 100ms!!!')
        waitct(frame_rate + getct())
        debug(`screen update)
        raw_loop_time := abs(start_time - getct())

pub debug_display()
    debug(`term term1 pos 867 0 size 28 12 textsize 18 color cyan)
    display_delay := clkfreq / 5 + getct()

    repeat
        loop_time := raw_loop_time * 10 / 3000
        frame_rate_wait_time := frame_rate * 10 / 3000
        if pollct(display_delay) == true
            debug(`term1 clear)
            debug(`term1 'JoyX = `(L_JOY_X)',10)
            debug(`term1 'JoyY = `(L_JOY_Y)',10)
            debug(`term1 'character[x] = `(character[x])',10)
            debug(`term1 'character[y] = `(character[y])',10)
            debug(`term1 'character_moving = `(character_moving)',10)
            debug(`term1 'loop_time = `(loop_time)' '�s',10)
            debug(`term1 'Frame Wait Time = `(frame_rate_wait_time)' '�s',10)

            debug(`term1 'Right Trigger = `(data[5])',10)

            if is_button_pressed("A")
                debug(`term1 'A button IS Pressed',10)
            else
                debug(`term1 'A button NOT Pressed',10)

            if data[7].[2] == 0
                debug(`term1 'Right Z button IS Pressed',10)
            else
                debug(`term1 'Right Z button NOT Pressed',10)

            if is_button_pressed("X")
                debug(`term1 'X button IS Pressed',10)
            else
                debug(`term1 'X button NOT Pressed',10)

            if collision == true
                debug(`term1 'Collision Detected!')
            else
                debug(`term1 'All Clear')
            display_delay := display_delay + clkfreq / 5

pub is_button_pressed(button) : boolean
    case button
        "A":
            return data[7].[4] == 0
        "Y":
            return data[7].[5] == 0
        "B":
            return data[7].[6] == 0
        "B":
            return data[7].[7] == 0
        "Z":
            return data[7].[2] == 0
        "Start":
            return data[6].[4] == 0
        "Select":
            return data[6].[5] == 0
        other:
            return false
pub debug_character_motion()
    debug(`term term2 pos 1150 0 size 32 12 textsize 18 color yellow)
    display_delay := clkfreq / 4 + getct()

    repeat
        if pollct(display_delay)
            debug(`term2 clear)

            debug(`term2 '--- Animation Debug ---',10)
            debug(`term2 'character_moving  = `(character_moving)',10)
            debug(`term2 'character_hitting = `(character_hitting)',10)
            debug(`term2 'Top Left Sprite     = `(character_top_left)',10)
            debug(`term2 'Top Right Sprite    = `(character_top_right)',10)
            debug(`term2 'Bottom Left Sprite  = `(character_bottom_left)',10)
            debug(`term2 'Bottom Right Sprite = `(character_bottom_right)',10)
            debug(`term2 'Rotation (0=R,1=L)  = `(character_rotation)',10)

            if character_hitting == true
                debug(`term2 'Status: HITTING animation active',10)
            elseif character_moving == true
                debug(`term2 'Status: RUNNING animation active',10)
            elseif character_jumping == true
                debug(`term2 'Status: JUMPING animation active',10)
            else
                debug(`term2 'Status: STANDING animation active',10)

            display_delay := getct() + clkfreq / 4



' TODO: Fix this 
pub spawn_enemies() | i, base
    repeat i from 0 to round_num - 1
        base := i * ENEMY_SIZE
        ' cogspin(i+1, enemy_motion(), @stack_1 + ((i) * 100)) 'Start from stack0 and add the adress to launch the cogs of the enemies
        enemies[base + ENEMY_ACTIVE] := 1
        enemies[base + ENEMY_X] := 50 + i * 60    ' space out horizontally we might have to add clamping
        enemies[base + ENEMY_Y] := 176 'The base floor
        enemies[base + ENEMY_HP] := 1

        ' enemy_top_left:= enemeies[base + ENEMY_TOP_LEFT_SPRITE]
        ' enemy_top_right:= enemies[base + ENEMY_TOP_RIGHT_SPRITE]
        ' enemy_bottom_left:= enemies[base + ENEMY_BOTTOM_LEFT_SPRITE]
        ' enemy_bottom_right:= enemies[base + ENEMY_BOTTOM_RIGHT_SPRITE]

        ' draw_character(enemy_top_left, enemy_top_right, enemy_bottom_left, enemy_bottom_right)
        draw_character(enemies[base + ENEMY_TOP_LEFT_SPRITE], enemies[base + ENEMY_TOP_RIGHT_SPRITE], enemies[base + ENEMY_BOTTOM_LEFT_SPRITE], enemies[base + ENEMY_BOTTOM_RIGHT_SPRITE])

pub draw_enemies() | i,base,enemy_rot
    repeat i from 0 to enemy_count - 1
        base := i * ENEMY_SIZE
        if enemies[base + ENEMY_ACTIVE] == 1

            enemy_rot := enemies[base + ENEMY_ROTATION]
            enemies[base + ENEMY_X] :=  enemies[base + ENEMY_X] +50
            if enemies[base + ENEMY_X] > 384 'I think this is the limit of the screen
                enemies[base + ENEMY_X] := 0
                enemies[base + ENEMY_ROTATION] := 1 - enemy_rot 'Invert the rotation


            enemy_top_left := enemies[base + ENEMY_TOP_LEFT_SPRITE]
            enemy_top_right := enemies[base + ENEMY_TOP_RIGHT_SPRITE]
            enemy_bottom_left := enemies[base + ENEMY_BOTTOM_LEFT_SPRITE]
            enemy_bottom_right := enemies[base + ENEMY_BOTTOM_RIGHT_SPRITE]

            if enemies[base + ENEMY_ROTATION] == 0
                draw_character(enemy_top_left, enemy_top_right, enemy_bottom_left, enemy_bottom_right)
            else
                draw_character(enemy_top_right, enemy_top_left, enemy_bottom_right, enemy_bottom_left)



pub character_motion()
    repeat
        case character_animation_state
            0: trigger_standing_animation()
            1: trigger_running_animation()
            2: trigger_hit_animation()
            3: trigger_jumping_animation()

pub enemy_motion()
    repeat
        case enemy_animation_state
            0: trigger_enemy_animation()



pub trigger_enemy_animation()
' This simulates walking
    enemy_top_left := 80
    enemy_top_right := 81
    enemy_bottom_left := 82
    enemy_bottom_right := 83

    advance_frame_4(@enemy_top_left, 80, 84, 88, 92)
    advance_frame_4(@enemy_top_right, 81, 85, 89, 93)
    advance_frame_4(@enemy_bottom_left, 82, 86, 90, 94)
    advance_frame_4(@enemy_bottom_right, 83, 87, 91, 95)

pub trigger_hit_animation()
    character_top_left := 50
    character_top_right := 51
    character_bottom_left := 52
    character_bottom_right := 53

    repeat 4
        advance_frame_4(@character_top_left,50, 54, 58, 62)
        advance_frame_4(@character_top_right, 51, 55, 59, 63)
        advance_frame_4(@character_bottom_left, 52, 56, 60, 64)
        advance_frame_4(@character_bottom_right, 53, 57, 61, 65)
        waitms(200)
    character_hitting:=false
    character_animation_state := 0

pub trigger_jumping_animation()
    character_top_left := 70
    character_top_right := 71
    character_bottom_left := 72
    character_bottom_right := 73

    advance_frame_4(@character_top_left, 70, 74, 78, 82)
    advance_frame_4(@character_top_right, 71, 75, 79, 83)
    advance_frame_4(@character_bottom_left, 72, 76, 80, 84)
    advance_frame_4(@character_bottom_right, 73, 77, 81, 85)

    jump_help:= 25
    repeat while character[y] < 300
        character[y] := character[y] + jump_help

    waitms(200)
    gravity := 5
    repeat while character[y] > starting_y
        character[y] := character[y] - gravity
        gravity := gravity + 5
        waitms(100)

    if character[y] < starting_y
        character[y] := starting_y

    character_jumping := false
    character_animation_state := 0
    waitms(100)

pub trigger_standing_animation()
    character_top_left := 1
    character_top_right := 2
    character_bottom_left := 3
    character_bottom_right := 4
    ' repeat while character_moving == false
    '     advance_frame_4(@character_top_left, 1, 5, 9, 13)
    '     advance_frame_4(@character_top_right, 2, 6, 10, 14)
    '     advance_frame_4(@character_bottom_left, 3, 7, 11, 15)
    '     advance_frame_4(@character_bottom_right, 4, 8, 12, 16)
    '     waitms(300)

pub advance_frame_4(sprite_ptr, val_1, val_2, val_3, val_4)
    case long[sprite_ptr]
        val_1: long[sprite_ptr] := val_2
        val_2: long[sprite_ptr] := val_3
        val_3: long[sprite_ptr] := val_4
        val_4: long[sprite_ptr] := val_1


pub advance_frame_2(sprite_ptr, val_1, val_2)
    case long[sprite_ptr]
        val_1: long[sprite_ptr] := val_2
        val_2: long[sprite_ptr] := val_1

pub trigger_running_animation()
    character_top_left := 20
    character_top_right := 21
    character_bottom_left := 22
    character_bottom_right := 23
    repeat while character_moving == true
        advance_frame_4(@character_top_left, 20, 24, 28, 32)
        advance_frame_4(@character_top_right, 21, 25, 29, 33)
        advance_frame_4(@character_bottom_left, 22, 26, 30, 34)
        advance_frame_4(@character_bottom_right, 23, 27, 31, 35)
        waitms(100)

pub advance_frame_5(sprite_ptr, val_1, val_2, val_3, val_4, val_5)
    case long[sprite_ptr]
        val_1: long[sprite_ptr] := val_2
        val_2: long[sprite_ptr] := val_3
        val_3: long[sprite_ptr] := val_4
        val_4: long[sprite_ptr] := val_5
        val_5: long[sprite_ptr] := val_1


pub init_character()
    starting_x := 80
    starting_y := 176

    character[x] := starting_x
    character[y] := starting_y

    character_top_left := 1
    character_top_right := 2
    character_bottom_left := 3
    character_bottom_right := 4

    character_animation_state := 0
    character_opacity := 255

    cogspin(1, character_motion(), @stack_1)

pub define_collision_areas()
    character[x] := 100
    character[y] := 128
    character[width] := 32
    character[height] := 64

    enemy[0] := 800
    enemy[1] := 96
    enemy[2] := 32
    enemy[3] := 32


pub check_collision(Box1address, Box2address) : CollisionState
    CollisionState~
    if long[Box1address] < (long[Box2address] + long[Box2address][2]) and {
                        }(long[Box1address] + long[Box1address][2]) > long[Box2address] and {
                                 } long[Box1address][1] > (long[Box2address][1] - long[Box2address][3]) and {
                                            } (long[Box1address][1] - long[Box1address][3]) < (long[Box2address][1])
        CollisionState := true
    else
        CollisionState := false

    if collision_debug_mode == true
        debug(`screen set `(long[Box1address]) `(long[Box1address][1]) red line `(long[Box1address] + long[Box1address][2])) `(long[Box1address][1]))
        debug(`screen set `(long[Box1address] + long[Box1address][2])) `(long[Box1address][1])) red line `(long[Box1address] + long[Box1address][2])) `(long[Box1address][1] - long[Box1address][3]))
        debug(`screen set `(long[Box1address] + long[Box1address][2])) `(long[Box1address][1] - long[Box1address][3])) red line `(long[Box1address])) `(long[Box1address][1] - long[Box1address][3]))
        debug(`screen set `(long[Box1address])) `(long[Box1address][1] - long[Box1address][3])) red line `(long[Box1address]) `(long[Box1address][1]))

        debug(`screen set `(long[Box2address]) `(long[Box2address][1]) red line `(long[Box2address] + long[Box2address][2])) `(long[Box2address][1]))
        debug(`screen set `(long[Box2address] + long[Box2address][2])) `(long[Box2address][1])) red line `(long[Box2address] + long[Box2address][2])) `(long[Box2address][1] - long[Box2address][3]))
        debug(`screen set `(long[Box2address] + long[Box2address][2])) `(long[Box2address][1] - long[Box2address][3])) red line `(long[Box2address])) `(long[Box2address][1] - long[Box2address][3]))
        debug(`screen set `(long[Box2address])) `(long[Box2address][1] - long[Box2address][3])) red line `(long[Box2address]) `(long[Box2address][1]))

        if CollisionState == true
            debug(`screen set 400 330 red text 50 'Collision!!!')

pub pause_game()
    debug(`screen set 400 330 red text 50 '<PAUSED>')
    debug(`screen update `dly(1000))
    read_controller()
    repeat until data[6].[4] == 0
        read_controller()
        waitms(100)
    repeat until data[6].[4] == 1
        read_controller()
    start_time := getct()

pub draw_background() | r,c,i k
    ' Draw the floors 

    repeat i from 0 to 704 step 64
        debug(`screen set `(i) 50 sprite (200, 0, 2))

    k := 0 'This is for the background
    repeat r from 740 to 228 step -64
        repeat c from 0 to 704 step 64
            debug(`screen set `(c) `(r) sprite (`(ds_mini_bg_tiles[k],0,4)))
            k++

    
    


pub get_matrix_element(address, row,column) : element
    element := byte[address + (row-1)*5+(column-1)]
  

dat ds_mini_bg_tiles byte {
}300,	301,	302,	303,	304,	{
}305,	306,	307,	308,	309,	{
}310,	311,	312,	313,	314,	{
}315,	316,	317,	318,	319,	{
}320,	321,	322,	323,	324,	{
}325,	326,	327,	328,	329




' The character has 4 sprite images, 2 for the top and 2 for the bottom'
pub draw_character(top_left,top_right,bottom_left,bottom_right)
    debug(`screen set (`(character[x]), `(character[y])) sprite (`(top_left), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x] + 64), `(character[y])) sprite (`(top_right), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x]), `(character[y] - 64)) sprite (`(bottom_left), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x] + 64), `(character[y] - 64)) sprite (`(bottom_right), `(character_rotation), 2, `(character_opacity)))
con

pub init_controller()
    i2c.setup(10, 11, 400, i2c.PU_1K5)
    i2c.start()
    i2c.write($A4)
    i2c.write($F0)
    i2c.write($55)
    i2c.stop()
    i2c.start()
    i2c.write($A4)
    i2c.write($FB)
    i2c.write($00)
    i2c.stop()
    waitus(150)

    i2c.start()
    i2c.write($A4)
    i2c.write($FE)
    i2c.write($03)
    i2c.stop()
    waitus(150)

pub read_controller() | i
    i2c.start()
    i2c.write($A4)
    i2c.write($00)
    i2c.stop()
    waitus(150)

    i2c.start()
    i2c.write($A5)
    repeat i from 0 to 6
        data[i] := i2c.read(0)
    data[7] := i2c.read(1)
    i2c.stop()


' SO I want to be able to spawn in enemies. I have an array of enemies[5] which is the max number of enemies/rounds
' Every round we spawn in i enemeies, when I spawn an enemy, I need the reference of the enemy to be stored in the enemies array