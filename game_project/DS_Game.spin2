{Ekow DS Game Editor}
con _clkfreq = 300_000_000

    R_JOY_X_MIN=4, R_JOY_X_MAX=252, R_JOY_Y_MIN=4, R_JOY_Y_MAX=252, L_JOY_X_MIN=2, L_JOY_X_MAX=254, L_JOY_Y_MIN=4, L_JOY_Y_MAX=252
    #0, x, y
    frame_time=75
    collision_debug_mode=true

obj
    sprites : "EkowDanielsSprites"
    i2c     : "jm_i2c"

CON
    ENEMY_ACTIVE     = 0
    ENEMY_X          = 1
    ENEMY_Y          = 2
    ENEMY_HP         = 3
    ENEMY_TOP_LEFT_SPRITE = 4
    ENEMY_TOP_RIGHT_SPRITE   = 5
    ENEMY_BOTTOM_LEFT_SPRITE  = 6
    ENEMY_BOTTOM_RIGHT_SPRITE  = 7
    ENEMY_ROTATION      = 8
    ENEMY_SEEN = 9
    ENEMY_OP = 10
    ENEMY_ID = 11

    MAX_ENEMIES = 6
    ENEMY_SIZE = 12
var
    ' Character-related variables
    long character_motion_triggered
    long character[2]
    long character_top_left, character_top_right, character_bottom_left, character_bottom_right
    long character_rotation, character_opacity
    long character_hitting, character_jumping, character_moving, character_animation_state
    long starting_x, starting_y
    long character_hp, character_score

    ' Enemy-related variables
    long enemies[MAX_ENEMIES*ENEMY_SIZE]  ' 5 enemies * 12 parameters each
    long enemy_count, enemies_alive
    long enemy_stacks[MAX_ENEMIES*500]  ' one 100-long stack per enemy

    ' Controller-related variables
    byte data[8]
    long L_JOY_X, L_JOY_Y

    ' Game-related variables
    long round_num
    long gravity, jump_help
    long collision_state, easter_egg

    ' Timing-related variables
    long frame_rate, frame_rate_wait_time
    long start_time, raw_loop_time, loop_time, display_delay

    ' Stack memory for cogs
    long stack_0[500], stack_1[500], stack_2[500], stack_3[500]
    long stack_4[500], stack_5[500], stack_6[500], stack_7[500]

    long round_started, game_restarted
    long showing_easter_egg
    long hard_mode


pub video_game() | i
    debug(`plot screen pos 100 0 size 768 640 backcolor black update) ' Initialize the game screen
    init_controller() ' Initialize the game controller
    waitms(100) ' Wait for a short period
    create_instruction_menu() ' Display the instruction menu
    debug(`screen set 400 330 blue text 50 'Loading sprites...') ' Show loading message
    debug(`screen update) ' Update the screen
    sprites.load_sprites() ' Load the sprite assets
    waitms(100)
    round_num := 1 ' Set the initial round number
    init_character() ' Initialize the character's properties
    hard_mode := false ' Disable hard mode initially
    
    repeat
        start_time := getct() ' Record the start time of the frame
        debug(`screen clear) ' Clear the screen for the new frame
        check_easter_egg_activated() ' Check if the easter egg is activated
        draw_background() ' Draw the game background
        if round_started == false
            start_round() ' Start a new round if not already started
            game_restarted := false ' Reset the game restart flag

        if enemies_alive == 0
            advance_round() ' Advance to the next round if all enemies are defeated
        read_controller() ' Read the controller input
        clamp_joysticks() ' Clamp joystick values to valid ranges
        if character_rotation == 0
            draw_character(character_top_left, character_top_right, character_bottom_left, character_bottom_right) ' Draw the character facing right
        else
            draw_character(character_top_right, character_top_left, character_bottom_right, character_bottom_left) ' Draw the character facing left
        draw_enemies() ' Draw all active enemies
        check_animation_state() ' Update the character's animation state based on input
        move_character() ' Move the character based on joystick input
        check_collisions_with_enemies() ' Check for collisions between the character and enemies
        check_win_status() ' Check if the player has won or lost
        if is_button_pressed("P")
            pause_game() ' Pause the game if the pause button is pressed
        adjust_frame_rate() 'adjust the frame rate to maintain a consistent speed



pub create_instruction_menu()
    ' This creates a menu with instructions on how to play the game
    debug(`screen clear)
    debug(`screen set 400 550 red text 30 'Welcome to the Demon Slayer Game!')
    debug(`screen set 400 470 white text 15 'How to Play:')
    debug(`screen set 400 440 white text 15 'Eliminate as many enemies as possible without dying.')
    debug(`screen set 400 410 white text 15 'Use the joystick to move and buttons to attack or jump.')
    debug(`screen set 400 380 white text 15 'Press A to attack, B to jump, and Select to pause.')
    debug(`screen set 400 350 white text 15 'Good luck, and have fun! Press A to start the game.')
    debug(`screen update)
    read_controller()
    repeat until is_button_pressed("A")
            read_controller()
    waitms(100)
    debug(`screen clear)

pub display_health_bar()| i
    'This function displays the health bar of the character
    debug(`screen set 60 620 red text 20 'HP: `(character_hp))

pub display_score()
    'This function displays the score of the character
    debug(`screen set 700 620 red text 20 'Score: `(character_score))

pub start_round()
    ' This function starts a new round of the game
    start_time := getct()
    debug(`screen set 400 330 red text 50 'Round `(round_num))
    debug(`screen update `dly(1000))
    waitms(1000)
    spawn_enemies()
    waitms(100)
    round_started := true

pub advance_round()
    ' This function advances to the next round of the game
    if round_num >MAX_ENEMIES
        return
    
    ifnot game_restarted
        round_num++
        round_started := false

pub check_win_status()
    ' This function checks if the player has won or lost the game
    read_controller()
    if character_hp < 0
        waitms(100)
        debug(`screen set 400 330 red text 30 'You Lose! Press A to Restart')
        debug(`screen update `dly(1000))
        repeat until is_button_pressed("A")
            read_controller()
            waitms(100)
        restart_game()
        return

    if round_num >= MAX_ENEMIES && enemies_alive == 0
        waitms(100)
        debug(`screen set 400 330 red text 30 'You Win! Press A to Restart')
        debug(`screen update `dly(1000))
        repeat until is_button_pressed("A")
            read_controller()
            waitms(100)

        restart_game()
        return

pub check_easter_egg_activated()
    ' This function checks if the easter egg is activated
    read_controller()
    if enemies_alive == 1 && round_num == 2
        if is_button_pressed("B")
            hard_mode := true
            waitms(100)
            debug(`screen set 400 330 red text 20 'Hard Mode Activated! Press A to Continue')
            debug(`screen update `dly(1000))
            repeat until is_button_pressed("A")
                read_controller()
                waitms(100)
            round_num := 4
            despawn_enemies()
            spawn_enemies()

pub despawn_enemies() | i, base
    ' This function despawns all enemies in the game
    enemies_alive := 0
    repeat i from 0 to round_num-1
        base := i * ENEMY_SIZE
        despawn_enemy(base)


pub restart_game()
    ' This function restarts the game
    round_num := 1
    game_restarted := true
    round_started := false
    hard_mode := false
    init_character()
    despawn_enemies()
    spawn_enemies()


pub adjust_frame_rate()
    ' This function adjusts the frame rate of the game
    frame_rate := frame_time * 300_000 - abs(start_time - getct())
    if frame_rate <= 0
        debug(`screen set 384 600 red text 20 'Frame loop took longer than 100ms!!!')
    waitct(frame_rate + getct())
    debug(`screen update)
    raw_loop_time := abs(start_time - getct())

pub move_character()
    ' This function moves the character based on joystick input
    case_fast L_JOY_X
        0..20  : character[x] := 0 #> character[x] - 16 <# 740
        21..30  : character[x] := 0 #> character[x] - 8 <# 740
        31..40  : character[x] := 0 #> character[x] - 4 <# 740
        61..70  : character[x] := 0 #> character[x] + 4 <# 740
        71..80  : character[x] := 0 #> character[x] + 8 <# 740
        81..100 : character[x] := 0 #> character[x] + 16 <# 740

pub debug_enemy()| i,base
    
    debug(`term term3 pos 1150 300 size 32 12 textsize 18 color green)
    display_delay := clkfreq / 4 + getct()

    repeat
        if pollct(display_delay)
            debug(`term3 clear)
            debug(`term3 '--- Enemy Debug ---',10)
            repeat i from 0 to round_num-1
                base := i * ENEMY_SIZE
                debug(`term3 'Enemy `(i)',10)
                debug(`term3 'Active         = `(enemies[base + ENEMY_ACTIVE])',10)
                debug(`term3 'X Position     = `(enemies[base + ENEMY_X])',10)
                debug(`term3 'Y Position     = `(enemies[base + ENEMY_Y])',10)
                debug(`term3 'HP             = `(enemies[base + ENEMY_HP])',10)
                debug(`term3 'Rotation       = `(enemies[base + ENEMY_ROTATION])',10)
                debug(`term3 'Seen           = `(enemies[base + ENEMY_SEEN])',10)
                debug(`term3 'Top Left Sprite     = `(enemies[base + ENEMY_TOP_LEFT_SPRITE])',10)
                debug(`term3 'Top Right Sprite    = `(enemies[base + ENEMY_TOP_RIGHT_SPRITE])',10)
                debug(`term3 'Bottom Left Sprite  = `(enemies[base + ENEMY_BOTTOM_LEFT_SPRITE])',10)
                debug(`term3 'Bottom Right Sprite = `(enemies[base + ENEMY_BOTTOM_RIGHT_SPRITE])',10)
                debug(`term3 '-----------------------------',10)

            display_delay := getct() + clkfreq / 4
pub debug_display()
    debug(`term term1 pos 867 0 size 28 12 textsize 18 color cyan)
    display_delay := clkfreq / 5 + getct()

    repeat
        loop_time := raw_loop_time * 10 / 3000
        frame_rate_wait_time := frame_rate * 10 / 3000
        if pollct(display_delay) == true
            debug(`term1 clear)
            debug(`term1 'JoyX = `(L_JOY_X)',10)
            debug(`term1 'JoyY = `(L_JOY_Y)',10)
            debug(`term1 'character[x] = `(character[x])',10)
            debug(`term1 'character[y] = `(character[y])',10)
            debug(`term1 'character_moving = `(character_moving)',10)
            debug(`term1 'loop_time = `(loop_time)' '�s',10)
            debug(`term1 'Frame Wait Time = `(frame_rate_wait_time)' '�s',10)

            debug(`term1 'Right Trigger = `(data[5])',10)

            if is_button_pressed("A")
                debug(`term1 'A button IS Pressed',10)
            else
                debug(`term1 'A button NOT Pressed',10)

            if data[7].[2] == 0
                debug(`term1 'Right Z button IS Pressed',10)
            else
                debug(`term1 'Right Z button NOT Pressed',10)

            if is_button_pressed("X")
                debug(`term1 'X button IS Pressed',10)
            else
                debug(`term1 'X button NOT Pressed',10)

            if is_button_pressed("P")
                debug(`term1 'Select button IS Pressed',10)
            else
                debug(`term1 'Select button NOT Pressed',10)



pub is_button_pressed(button) : boolean
    ' This function checks if a specific button is pressed
    case button
        "A":
            return data[7].[4] == 0
        "B":
            return data[7].[6] == 0
        "P": ''THis is the select button
            return data[6].[4] == 0
        "S": ''This is the start button
            return data[6].[5] == 0
        other:
            return false
pub debug_character_motion()
    debug(`term term2 pos 1150 0 size 32 12 textsize 18 color yellow)
    display_delay := clkfreq / 4 + getct()

    repeat
        if pollct(display_delay)
            debug(`term2 clear)

            debug(`term2 '--- Animation Debug ---',10)
            debug(`term2 'character_moving  = `(character_moving)',10)
            debug(`term2 'character_hitting = `(character_hitting)',10)
            debug(`term2 'Top Left Sprite     = `(character_top_left)',10)
            debug(`term2 'Top Right Sprite    = `(character_top_right)',10)
            debug(`term2 'Bottom Left Sprite  = `(character_bottom_left)',10)
            debug(`term2 'Bottom Right Sprite = `(character_bottom_right)',10)
            debug(`term2 'Rotation (0=R,1=L)  = `(character_rotation)',10)

            if character_hitting == true
                debug(`term2 'Status: HITTING animation active',10)
            elseif character_moving == true
                debug(`term2 'Status: RUNNING animation active',10)
            elseif character_jumping == true
                debug(`term2 'Status: JUMPING animation active',10)
            else
                debug(`term2 'Status: STANDING animation active',10)

            display_delay := getct() + clkfreq / 4

pub spawn_enemies() | i, base,result
    ' This function spawns enemies in the game
    repeat i from 0 to round_num-1
        base := i * ENEMY_SIZE
        init_enemy(base)
        cogspin(i + 2, enemy_motion(base), @enemy_stacks[i * 500]) 'automatically assign a cog to each enemy
        

pub despawn_enemy(base)
    ' This function despawns an enemy
    enemies[base + ENEMY_ACTIVE] := false
    enemies[base + ENEMY_OP]:=0
    enemies_alive--
    cogstop(base / ENEMY_SIZE + 2)
pub draw_enemies() | i,base,enemy_rot
    ' This function draws all active enemies on the screen
    repeat i from 0 to round_num-1
        base := i * ENEMY_SIZE
        if enemies[base + ENEMY_ACTIVE]
            draw_enemy(base)

pub init_enemy(enemy_reference)
    ' This function initializes an enemy's properties
    enemies[enemy_reference + ENEMY_TOP_LEFT_SPRITE] := 80
    enemies[enemy_reference + ENEMY_TOP_RIGHT_SPRITE] := 81
    enemies[enemy_reference + ENEMY_BOTTOM_LEFT_SPRITE] := 82
    enemies[enemy_reference + ENEMY_BOTTOM_RIGHT_SPRITE] := 83
    enemies[enemy_reference + ENEMY_X] := 100 + (enemy_reference / ENEMY_SIZE) * 100
    enemies[enemy_reference + ENEMY_Y] := 176
    enemies[enemy_reference + ENEMY_ROTATION] := 0
    enemies[enemy_reference + ENEMY_HP] := 1
    enemies[enemy_reference + ENEMY_SEEN] := false
    enemies[enemy_reference + ENEMY_ACTIVE] := true
    enemies[enemy_reference + ENEMY_OP] := 255
    enemies_alive++

pub handle_enemy_movement(enemy_reference)
    ' This function handles the movement of an enemy
    if enemies[enemy_reference + ENEMY_X] > 640
        enemies[enemy_reference + ENEMY_X] := 640
        enemies[enemy_reference + ENEMY_ROTATION] :=1
    if enemies[enemy_reference + ENEMY_X] < 0
        enemies[enemy_reference + ENEMY_X] := 0
        enemies[enemy_reference + ENEMY_ROTATION] :=0


pub enemy_motion(enemy_reference)
    ' This function controls the enemy's motion
    repeat
        trigger_enemy_animation(enemy_reference)
        handle_enemy_movement(enemy_reference)
        move_enemy(enemy_reference)
        waitms(20)

pub move_enemy(enemy_reference)
    ' This function moves the enemy based on its rotation
    if enemies[enemy_reference + ENEMY_ROTATION] == 0
        enemies[enemy_reference + ENEMY_X] := enemies[enemy_reference + ENEMY_X] + 1
    else
        enemies[enemy_reference + ENEMY_X] := enemies[enemy_reference + ENEMY_X] - 1
pub trigger_enemy_animation(enemy_reference)
    ' This function triggers the enemy's animation
    advance_frame_3(@enemies[enemy_reference + ENEMY_TOP_LEFT_SPRITE], 80, 84, 88)
    advance_frame_3(@enemies[enemy_reference + ENEMY_TOP_RIGHT_SPRITE], 81, 85, 89)
    advance_frame_3(@enemies[enemy_reference + ENEMY_BOTTOM_LEFT_SPRITE], 82, 86, 90)
    advance_frame_3(@enemies[enemy_reference + ENEMY_BOTTOM_RIGHT_SPRITE], 83, 87, 91)

pub character_motion()
    ' This function controls the character's motion
    repeat
        case character_animation_state
            0: trigger_standing_animation()
            1: trigger_running_animation()
            2: trigger_hit_animation()
            3: trigger_jumping_animation()

pub trigger_hit_animation()
    ' This function triggers the character's hit animation
    character_top_left := 50
    character_top_right := 51
    character_bottom_left := 52
    character_bottom_right := 53

    repeat 4
        advance_frame_4(@character_top_left,50, 54, 58, 62)
        advance_frame_4(@character_top_right, 51, 55, 59, 63)
        advance_frame_4(@character_bottom_left, 52, 56, 60, 64)
        advance_frame_4(@character_bottom_right, 53, 57, 61, 65)
        waitms(100)
    character_hitting:=false
    character_animation_state := 0

pub trigger_jumping_animation()
    ' This function triggers the character's jumping animation
    character_top_left := 70
    character_top_right := 71
    character_bottom_left := 72
    character_bottom_right := 73

    advance_frame_4(@character_top_left, 70, 74, 78, 82)
    advance_frame_4(@character_top_right, 71, 75, 79, 83)
    advance_frame_4(@character_bottom_left, 72, 76, 80, 84)
    advance_frame_4(@character_bottom_right, 73, 77, 81, 85)

    handle_gravity()
    character_jumping := false
    character_animation_state := 0
    waitms(100)

pub handle_gravity()
    ' This function handles the character's jumping and gravity
    jump_help:= 30
    repeat while character[y] < 400
        character[y] := character[y] + jump_help

    waitms(200)
    gravity := 5
    repeat while character[y] > starting_y
        character[y] := character[y] - gravity
        gravity := gravity + 5
        waitms(100)

    if character[y] < starting_y
        character[y] := starting_y


pub trigger_standing_animation()
    ' This function triggers the character's standing animation
    character_top_left := 1
    character_top_right := 2
    character_bottom_left := 3
    character_bottom_right := 4


pub advance_frame_4(sprite_ptr, val_1, val_2, val_3, val_4)
    ' This function advances the frame of the character's animation
    case long[sprite_ptr]
        val_1: long[sprite_ptr] := val_2
        val_2: long[sprite_ptr] := val_3
        val_3: long[sprite_ptr] := val_4
        val_4: long[sprite_ptr] := val_1

pub advance_frame_3(sprite_ptr, val_1, val_2, val_3)
    case long[sprite_ptr]
        val_1: long[sprite_ptr] := val_2
        val_2: long[sprite_ptr] := val_3
        val_3: long[sprite_ptr] := val_1


pub trigger_running_animation()
    ' This function triggers the character's running animation
    character_top_left := 20
    character_top_right := 21
    character_bottom_left := 22
    character_bottom_right := 23
    repeat while character_moving == true
        advance_frame_4(@character_top_left, 20, 24, 28, 32)
        advance_frame_4(@character_top_right, 21, 25, 29, 33)
        advance_frame_4(@character_bottom_left, 22, 26, 30, 34)
        advance_frame_4(@character_bottom_right, 23, 27, 31, 35)
        waitms(100)

pub init_character()
    ' This function initializes the character's properties
    starting_x := 80
    starting_y := 176

    character[x] := starting_x
    character[y] := starting_y

    character_top_left := 1
    character_top_right := 2
    character_bottom_left := 3
    character_bottom_right := 4

    character_animation_state := 0
    character_opacity := 255
    character_hp := 100
    character_score := 0

    cogspin(1, character_motion(), @stack_1)
pub check_collisions_with_enemies() | i, base, dx, dy
    ' This function checks for collisions between the character and enemies
    repeat i from 0 to round_num - 1
        base := i * ENEMY_SIZE
        ifnot enemies[base + ENEMY_ACTIVE]
            next

        dx := character[x] - enemies[base + ENEMY_X]
        dy := character[y] - enemies[base + ENEMY_Y]


        if dx * dx + dy * dy < 70*70
            if character_animation_state ==2
                despawn_enemy(base)
                character_score++
            else
                if hard_mode
                    character_hp-=2
                else
                    character_hp--
                cogspin(7, flash_opacity(), @stack_6)
            return

pub flash_opacity()
    ' This function flashes the character's opacity
    repeat 4
        character_opacity := 50
        waitms(100)
        character_opacity := 255
        waitms(100)

pub clamp_joysticks()
    ' This function clamps the joystick values to valid ranges
    L_JOY_X := 0 #> (data[0] - L_JOY_X_MIN) * 100 / (L_JOY_X_MAX - L_JOY_X_MIN) <# 100
    L_JOY_Y := 0 #> (data[2] - L_JOY_Y_MIN) * 100 / (L_JOY_Y_MAX - L_JOY_Y_MIN) <# 100

pub pause_game()
    ' This function pauses the game
    debug(`screen set 400 330 red text 50 '<PAUSED>')
    debug(`screen update `dly(1000))
    read_controller()
    repeat until data[6].[4] == 0
        read_controller()
        waitms(100)
    repeat until data[6].[4] == 1
        read_controller()
    start_time := getct()

pub draw_background() | i
    ' Background tiles (trees)
   ' Row 1 (y = 710)
    debug(`screen set -30  710 sprite (150, 0, 5))
    debug(`screen set 130  710 sprite (151, 0, 5))
    debug(`screen set 290  710 sprite (152, 0, 5))
    debug(`screen set 450  710 sprite (153, 0, 5))
    debug(`screen set 610  710 sprite (154, 0, 5))

    ' Row 2 (y = 550)
    debug(`screen set -30  550 sprite (155, 0, 5))
    debug(`screen set 130  550 sprite (156, 0, 5))
    debug(`screen set 290  550 sprite (157, 0, 5))
    debug(`screen set 450  550 sprite (158, 0, 5))
    debug(`screen set 610  550 sprite (159, 0, 5))

    ' Row 3 (y = 390)
    debug(`screen set -30  390 sprite (160, 0, 5))
    debug(`screen set 130  390 sprite (161, 0, 5))
    debug(`screen set 290  390 sprite (162, 0, 5))
    debug(`screen set 450  390 sprite (163, 0, 5))
    debug(`screen set 610  390 sprite (164, 0, 5))

    ' Row 4 (y = 230)
    debug(`screen set -30  230 sprite (165, 0, 5))
    debug(`screen set 130  230 sprite (166, 0, 5))
    debug(`screen set 290  230 sprite (167, 0, 5))
    debug(`screen set 450  230 sprite (168, 0, 5))
    debug(`screen set 610  230 sprite (169, 0, 5))

    ' Row 5 (y = 70)
    debug(`screen set -30  70 sprite (170, 0, 5))
    debug(`screen set 130  70 sprite (171, 0, 5))
    debug(`screen set 290  70 sprite (172, 0, 5))
    debug(`screen set 450  70 sprite (173, 0, 5))
    debug(`screen set 610  70 sprite (174, 0, 5))

    display_score()
    display_health_bar()
    repeat i from 0 to 704 step 64
        debug(`screen set `(i) 50 sprite (200, 0, 2))


    
dat trees_tiles byte {
}150,   151,    152,    153,    154,    {
}155,   156,    157,    158,    159,    {
}160,   161,    162,    163,    164,    {
}165,   166,    167,    168,    169,    {
}170,   171,    172,    173,    174

' The character has 4 sprite images, 2 for the top and 2 for the bottom'
pub draw_character(top_left,top_right,bottom_left,bottom_right)
    debug(`screen set (`(character[x]), `(character[y])) sprite (`(top_left), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x] + 64), `(character[y])) sprite (`(top_right), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x]), `(character[y] - 64)) sprite (`(bottom_left), `(character_rotation), 2, `(character_opacity)))
    debug(`screen set (`(character[x] + 64), `(character[y] - 64)) sprite (`(bottom_right), `(character_rotation), 2, `(character_opacity)))

pub draw_enemy(enemy_reference) | enemy_top_left, enemy_top_right, enemy_bottom_left, enemy_bottom_right, enemy_rot, x_enemy, y_enemy, enemy_opacity

    ' Configs for the enemy
    enemy_top_left := enemies[enemy_reference + ENEMY_TOP_LEFT_SPRITE]
    enemy_top_right := enemies[enemy_reference + ENEMY_TOP_RIGHT_SPRITE]
    enemy_bottom_left := enemies[enemy_reference + ENEMY_BOTTOM_LEFT_SPRITE]
    enemy_bottom_right := enemies[enemy_reference + ENEMY_BOTTOM_RIGHT_SPRITE]
    enemy_rot := enemies[enemy_reference + ENEMY_ROTATION]
    x_enemy := enemies[enemy_reference + ENEMY_X]
    y_enemy := enemies[enemy_reference + ENEMY_Y]
    enemy_opacity := enemies[enemy_reference + ENEMY_OP]
    if enemy_rot == 1
        enemy_top_left := enemy_top_right
        enemy_top_right := enemies[enemy_reference + ENEMY_TOP_LEFT_SPRITE]
        enemy_bottom_left := enemy_bottom_right
        enemy_bottom_right := enemies[enemy_reference + ENEMY_BOTTOM_LEFT_SPRITE]

    'Draws the enemy
    debug(`screen set (`(x_enemy), `(y_enemy)) sprite (`(enemy_top_left), `(enemy_rot), 2, `(enemy_opacity)))
    debug(`screen set (`(x_enemy + 64), `(y_enemy)) sprite (`(enemy_top_right), `(enemy_rot), 2, `(enemy_opacity)))
    debug(`screen set (`(x_enemy), `(y_enemy - 64)) sprite (`(enemy_bottom_left), `(enemy_rot), 2, `(enemy_opacity)))
    debug(`screen set (`(x_enemy + 64), `(y_enemy - 64)) sprite (`(enemy_bottom_right), `(enemy_rot), 2, `(enemy_opacity)))

pub check_animation_state()
    ' This function checks the character's animation state based on joystick input
    if is_button_pressed("A")
        character_hitting := true
        character_animation_state := 2
    elseif is_button_pressed("B")
        character_jumping := true
        character_animation_state := 3
    elseif (L_JOY_X < 45 or L_JOY_X > 55)
        character_moving := true
        character_animation_state := 1
        if L_JOY_X < 45
            character_rotation := 1
        else
            character_rotation := 0
    else
        character_moving := false
        character_animation_state := 0

pub init_controller()
    ' This function initializes the game controller
    i2c.setup(10, 11, 400, i2c.PU_1K5)
    i2c.start()
    i2c.write($A4)
    i2c.write($F0)
    i2c.write($55)
    i2c.stop()
    i2c.start()
    i2c.write($A4)
    i2c.write($FB)
    i2c.write($00)
    i2c.stop()
    waitus(150)

    i2c.start()
    i2c.write($A4)
    i2c.write($FE)
    i2c.write($03)
    i2c.stop()
    waitus(150)

pub read_controller() | i
    ' This function reads the controller input
    i2c.start()
    i2c.write($A4)
    i2c.write($00)
    i2c.stop()
    waitus(150)

    i2c.start()
    i2c.write($A5)
    repeat i from 0 to 6
        data[i] := i2c.read(0)
    data[7] := i2c.read(1)
    i2c.stop()